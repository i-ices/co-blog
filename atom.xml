<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ices</title>
  
  <subtitle>谦虚不是把自己想得很糟，而是完全不想自己。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://co.ices.fun/"/>
  <updated>2020-08-05T08:30:02.433Z</updated>
  <id>http://co.ices.fun/</id>
  
  <author>
    <name>Yi Bin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>list</title>
    <link href="http://co.ices.fun/2020/08/05/list/"/>
    <id>http://co.ices.fun/2020/08/05/list/</id>
    <published>2020-08-05T07:19:26.000Z</published>
    <updated>2020-08-05T08:30:02.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="list集合"><a href="#list集合" class="headerlink" title="list集合"></a><center>list集合</center></h2><p><img src="/2020/08/05/list/bg.jpg"></p><a id="more"></a><p><strong>我们用的比较多List包括ArrayList和LinkedList。</strong></p><h3 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h3><p><strong>ArrayList是List使用中最常用的实现类，它的查询速度快，效率高，但增删慢，线程不安全。</strong><br><strong>实现原理：</strong><br>ArrayList底层实现采用的数据结构是数组，并且数组默认大小为10，所以下面两种方式是等同的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();  <span class="comment">//没有指定数组大小，使用默认值（默认大小是10）</span></span><br><span class="line"></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList(<span class="number">10</span>);  <span class="comment">// 指定数组大小为10，传如的参数便是数组的大小，传入为10时，跟默认值相同，所以是等同的</span></span><br></pre></td></tr></table></figure><p>要想清楚的理解上面两中方式，从ArrayList类的构造器就会豁然开朗：</p><p>注：不同的jdk版本实现代码有所不同, 现以jdk1.8为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造器</span></span><br><span class="line"><span class="comment">// DEFAULTCAPACITY_EMPTY_ELEMENTDATA是一个默认大小的空实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造器，参数为列表的初始容量（由于是通过数组实现的，所以可以理解成数组的大小）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment">*         is negative</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩容机制：</strong><br>jdk1.8的扩容算法：newCapacity = oldCapacity + ( oldCapacity &gt;&gt; 1 ) ;   // oldCapacity &gt;&gt; 2  移位运算，此处相当于oldCapacity除以2，但是 &gt;&gt; 这种写法更加高效</p><p>jdk1.6的扩容算法：newCapacity = ( oldCapacity * 3 ) / 2 +1 ;</p><p>参数介绍：newCapacity 是扩容后的容量大小，oldCapacity 是扩容前的大小</p><p>查看jdk源码，移位运算需要学习下，换句话说，就是需要学习下二进制，比如：反码、补码，二进制与十进制、十六进制的相互转换。与机器交流的都是0110等，所以挺重要的。</p><hr><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p><strong>LinkedList底层是一个双向链表，它增删快，效率高，但是查询慢，线程不安全</strong><br><strong>实现原理：</strong><br>构造器只有如下两种;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty list.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参构造</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于它的底层实现是链表，所以没有容量大小的定义，只有上个节点，当前节点，下个节点，每个节点都有一个上级节点和一个下级节点。<br><strong>新增元素：</strong></p><ol><li>头部新增</li></ol><p>实现代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as first element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先获取头部节点元素，判断是否为null，若为null，说明原链表中没有元素，则把 first 和 last 都赋为当前新增节点。</p><p>若不为null，说明原链表中有元素，则把first赋为当前新增节点，把原头部节点f的上级节点修改为当前新增节点的下级节点。</p><ol start="2"><li>尾部新增</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与头部新增元素类似，不再赘述。</p><p><strong>删除元素：</strong></p><p>删除元素有三种方式，删除第一元素，删除最后一个元素，删除中间部分的某个元素。   现介绍最后一个，最后一个搞懂了，前两个就懂了。<br>实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：要删除元素的当前节点x，将当前节点x的上级节点的下级节点设为当前节点x的下级节点，将当前节点x的下级节点的上级节点设为当前节点x的上级节点。</p><p>中间考虑上级节点或下级节点为空的情况，也就是头部删除与尾部删除。</p><hr><p><em>文段取自<a href="https://www.cnblogs.com/kanglijun/p/10999247.html">Java集合List实现原理</a></em></p><hr><p>ArrayList的底层的通过数组实现，所以其随机访问的速度比较快，但是对于需要频繁的增删的情况，效率就比较低了。<br>而对于LinkedList，底层通过链表来实现，所以增删操作比较容易完成，但是对于随机访问的效率比较低。<br>我们看看两者的查询的效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span>: Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ice</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mail</span>: 3268131637@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/8/5 0:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">            linkedList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">            arrayList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> k = linkedList.get(j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = random.nextInt(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> k = arrayList.get(j);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis() - end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3452</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>很明显可以看出，ArrayList的随机访问效率比LinkedList高出好几个数量级。<br>通过这段代码，我们应该能够比较清楚的知道LinkedList和ArrayList的区别和适应的场景。<br>至于Vector，它是ArrayList的线程安全版本，而Stack则对应栈数据结构，这两者用的比较少，这里就不举例了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;list集合&quot;&gt;&lt;a href=&quot;#list集合&quot; class=&quot;headerlink&quot; title=&quot;list集合&quot;&gt;&lt;/a&gt;&lt;center&gt;list集合&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/08/05/list/bg.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://co.ices.fun/categories/java/"/>
    
    
      <category term="java" scheme="http://co.ices.fun/tags/java/"/>
    
      <category term="集合" scheme="http://co.ices.fun/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="list" scheme="http://co.ices.fun/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>java集合</title>
    <link href="http://co.ices.fun/2020/08/04/java%E9%9B%86%E5%90%88/"/>
    <id>http://co.ices.fun/2020/08/04/java%E9%9B%86%E5%90%88/</id>
    <published>2020-08-04T15:11:56.000Z</published>
    <updated>2020-08-05T07:48:48.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java集合体系"><a href="#java集合体系" class="headerlink" title="java集合体系"></a><center>java集合体系</center></h2><p><img src="/2020/08/04/java%E9%9B%86%E5%90%88/bg.jpg"></p><a id="more"></a><hr><h3 id="集合简介："><a href="#集合简介：" class="headerlink" title="集合简介："></a>集合简介：</h3><p>Java集合就像一种容器，可以把多个对象（实际上是对象的引用，但习惯上都称对象）“丢进”该容器中。<br>从Java 5 增加了泛型以后，Java集合可以记住容器中对象的数据类型，使得编码更加简洁、健壮。</p><hr><ul><li><h3 id="为什么使用集合而不是使用数组。"><a href="#为什么使用集合而不是使用数组。" class="headerlink" title="为什么使用集合而不是使用数组。"></a>为什么使用集合而不是使用数组。</h3><ul><li><strong>集合和数组相似点</strong><ul><li>都可以存储多个对象，对外作为一个整体的存在</li></ul></li><li><strong>数组的缺点</strong><ul><li>长度必须在初始化时固定，且固定后就不能改变</li><li>数组采用的是连续存储空间，删除和添加效率低</li><li>数组无法直接保存映射关系</li><li>数组缺乏封装，操作繁琐</li></ul></li></ul></li></ul><h2 id><a href="#" class="headerlink" title></a><img src="/2020/08/04/java%E9%9B%86%E5%90%88/%E6%95%B0%E7%BB%8401.png" alt="数组"></h2><ul><li><h3 id="集合架构"><a href="#集合架构" class="headerlink" title="集合架构"></a>集合架构</h3><ul><li>java集合框架提供了一套性能优良、使用方便的接口和类，它们位于Java.util包中</li><li>存放集合中的数据，被称为元素(element)。</li></ul></li></ul><p><img src="/2020/08/04/java%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88%E6%9E%B6%E6%9E%8401.png" alt="集合架构"><br><img src="/2020/08/04/java%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88%E6%9E%B6%E6%9E%8402.jpg" alt="集合架构"></p><p>上图中，实线边框的是实现类，比如ArrayList，LinkedList，HashMap等。<br>折线边框的是抽象类，比如AbstractCollection，AbstractList，AbstractMap等。<br>而点线边框的是接口，比如Collection，Iterator，List等。</p><p>Java中的集合包含多种数据结构，如链表、队列、哈希表等。从类的继承结构来说.<br>可以分为两大类，一类是继承自Collection接口，这类集合包含List、Set和Queue等集合类。<br>另一类是继承自Map接口，这主要包含了哈希表相关的集合类。</p><hr><h2 id="List"><a href="#List" class="headerlink" title="List"></a><a href="../../05/list/index.html">List</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java集合体系&quot;&gt;&lt;a href=&quot;#java集合体系&quot; class=&quot;headerlink&quot; title=&quot;java集合体系&quot;&gt;&lt;/a&gt;&lt;center&gt;java集合体系&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/08/04/java%E9%9B%86%E5%90%88/bg.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://co.ices.fun/categories/java/"/>
    
    
      <category term="java" scheme="http://co.ices.fun/tags/java/"/>
    
      <category term="集合" scheme="http://co.ices.fun/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>navicat-for-mysql破解</title>
    <link href="http://co.ices.fun/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/"/>
    <id>http://co.ices.fun/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/</id>
    <published>2020-08-04T02:11:38.000Z</published>
    <updated>2020-08-04T13:00:00.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="破解navicat-for-mysql中文版，无需激活码"><a href="#破解navicat-for-mysql中文版，无需激活码" class="headerlink" title="破解navicat for mysql中文版，无需激活码"></a><center>破解navicat for mysql中文版，无需激活码</center></h2><p><img src="/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/bg.jpg"></p><a id="more"></a><ol><li><strong>首先下载破解版的navicat for mysql</strong><br><a href="https://pan.baidu.com/s/1TLEtow1zDRRlxNiHTcipbQ">下载地址</a> 提取码: jjij<br></li></ol><hr><ol start="2"><li><strong>解压后文件夹下面有两个文件</strong><br><img src="/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/01.png" alt="文件"><br>选择第一个按照正常流程安装<br></li></ol><hr><ol start="3"><li><strong>安装完成后点击第二个</strong><br><img src="/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/02.png" alt="第二个"><br></li></ol><hr><ol start="4"><li><strong>点开后会让你选择安装好的exe文件</strong><br><img src="/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/03.png" alt="选择安装路径下的exe文件"><br>选择刚刚安装的navicat for mysql 安装的目录下面的exe文件<br></li></ol><hr><ol start="5"><li><strong>出现了下面这个提示就表示成功破解</strong><br><img src="/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/04.png" alt="提示"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;破解navicat-for-mysql中文版，无需激活码&quot;&gt;&lt;a href=&quot;#破解navicat-for-mysql中文版，无需激活码&quot; class=&quot;headerlink&quot; title=&quot;破解navicat for mysql中文版，无需激活码&quot;&gt;&lt;/a&gt;&lt;center&gt;破解navicat for mysql中文版，无需激活码&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/08/04/navicat-for-mysql%E7%A0%B4%E8%A7%A3/bg.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://co.ices.fun/categories/mysql/"/>
    
    
      <category term="破解" scheme="http://co.ices.fun/tags/%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="mysql" scheme="http://co.ices.fun/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hexo不能正常显示图片</title>
    <link href="http://co.ices.fun/2020/08/02/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
    <id>http://co.ices.fun/2020/08/02/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</id>
    <published>2020-08-02T03:24:14.000Z</published>
    <updated>2020-08-04T13:09:34.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。"><a href="#关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。" class="headerlink" title="关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。"></a>关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。</h2><p><img src="/2020/08/02/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/bg.jpg"></p><a id="more"></a><h2 id="关于hexo插入图片无法显示的问题"><a href="#关于hexo插入图片无法显示的问题" class="headerlink" title="关于hexo插入图片无法显示的问题"></a>关于hexo插入图片无法显示的问题</h2><p>有时候自己的博文想要添加自己的图片的时候，会发现自己的图片不显示，这是我们可以打开开发者工具看一下图片的路径，会发现不是绝对路径。</p><h2 id="问题推测"><a href="#问题推测" class="headerlink" title="问题推测"></a>问题推测</h2><h3 id="本地图片没有上传到github仓库中，导致引用无效"><a href="#本地图片没有上传到github仓库中，导致引用无效" class="headerlink" title="本地图片没有上传到github仓库中，导致引用无效"></a>本地图片没有上传到github仓库中，导致引用无效</h3><hr><p>解决方案：安装插件，配置文件</p><p>首先我们需要一个图片路径转换的插件，插件名字叫hexo-asset-image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装完这个插件后需要修改一下里面的内容<br>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打开_config.yml文件，修改以下内容<br><img src="/2020/08/02/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/02.png" alt="配置文件"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="本地图片没有放在同名的文件夹中"><a href="#本地图片没有放在同名的文件夹中" class="headerlink" title="本地图片没有放在同名的文件夹中"></a>本地图片没有放在同名的文件夹中</h3><p>解决方案：将需要引用的本地图片存放在与文章名相同的文件夹中</p><h3 id="图片的路径出错"><a href="#图片的路径出错" class="headerlink" title="图片的路径出错"></a>图片的路径出错</h3><p>我在使用开发者工具查看图片的路径的时候发现文件的路径有点不对头<br>但是我总找不到原因，后来随便修改了一下站点配置文件成功解决<br>只要把url的https前缀加上就行<br><img src="/2020/08/02/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/03.png" alt="修改url"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。&quot;&gt;&lt;a href=&quot;#关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。&quot; class=&quot;headerlink&quot; title=&quot;关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。&quot;&gt;&lt;/a&gt;关于我第一次搭建的时候发现插入图片的时候不能正常显示，找到问题的原因，并记录下来。&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/08/02/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/bg.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://co.ices.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://co.ices.fun/tags/hexo/"/>
    
      <category term="图片" scheme="http://co.ices.fun/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
</feed>
